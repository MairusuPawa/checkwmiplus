
# Get additional ini file configurations and share your configurations 
# at http://www.edcint.co.nz

#==============================================================================
#==============================================================================
#====================== SAMPLES and DOCUMENTATION =============================
#==============================================================================
#==============================================================================

#----------------------------------------------------------
# the ini section names are specified according to 2 formats
# 1) [MODE]
# 2) [MODE SUBMODE]
# You use the check defined in a specific ini section by specifying 
# -m MODE or 
# -m MODE -s SUBMODE 
# on the plugin command line
# this helps us group similar checks together
# eg to run this minimal check which belongs the sample group
# -m sample -s minimal
[sample minimal]
# this help is displayed only when -m MODE or -m MODE -s SUBMODE are specified AND --inihelp is used on the command line
inihelp=<<EOT
MODE=sample, SUBMODE=minimal
============================
   Help for a sample check that specifies only a minimal amount of configuration in the ini File.
   This sample simply displays the Name of the Operating System
   It has no warning/critical specification and provides no performance data
EOT

query=Select Caption From Win32_OperatingSystem

# the first display field is the standard one we use for the core plugin checks. It includes the status of the check and what triggered a warning/critical state (if any)
display=_DisplayMsg||~|~| - ||
display=Caption


#----------------------------------------------------------
# eg to run this full check which belongs the sample group
# -m sample -s full
[sample full]

# the version of the plugin that this section requires to operate
requires=1.41

# this help is displayed only when -m MODE or -m MODE -s SUBMODE are specified AND --inihelp is used on the command line
inihelp=<<EOT
MODE=sample, SUBMODE=full
=========================
   Help for a sample check that specifies all currently possible fields in the ini File
   
EOT

# Note:
# use the -d parameter to debug and see the query and the output returned from wmic 
# this helps build the correct query, get the test=, display= and perf= field names correct
# and shows you if you need to specify headerregex= and dataregex=

# The documentation for WMI for this query can be found at
# http://msdn.microsoft.com/en-us/library/aa394239%28v=VS.85%29.aspx
# Note that sometimes the field names returned by wmic sometime differ slightly to those listed by Microsoft
# Most of them are ok by some do vary (most in capitalisation)
# eg wmic returns "FileControlBytesPersec" but Microsoft lists FileControlBytesPerSec

# only use this field if the WMI query needs to have / converted to \
# useful to make the command line more friendly for the user since the use of \ on the command line can get tricky
slashconversion=1

# the Name field sometimes gets returned in by wmic for most queries without being specified
# it seems to be OS version dependent. 
# We recommend always specifying if it in the the WMI Class it to make sure queries are OS version indpendent
# Sometimes the Name field contains | - see info on dataregex field to fix this if needed
# for some queries you might add some thing like "WHERE Name="{_arg1}"
# this will allow you to select a specific returned row when multiple are returned
# this sample does not use it but you will find others below that do
query=Select Name,RegisteredUser,ServicePackMajorVersion,NumberOfProcesses,WindowsDirectory,NumberOfUsers,MaxNumberOfProcesses From Win32_OperatingSystem

# list the fields that we want to be able to specify warning/critical values against
# the first one defined is the default if none is specified in a warn/crit specification on the command line
test=NumberOfProcesses
test=NumberOfUsers

# list the fields that are displayed in the plugin output
# fields displayed in the order that they are defined and at least one is always required
# the value can be in 3 formats - 
# 1) FIELD (where we just display this field like FIELD=xx,
# 2) FIELD|UNITS (where we just display this field like FIELD=xxUNITS,
# 3) FIELD|UNITS|DISPLAY|SEP|DELIM|START|END
# where we display this FIELD like STARTDISPLAYSEPxxUNITSENDDELIM
# the default DELIM is comma space, if DELIM is set to ~ then none will be used
# the default SEP is =, if SEP is set to ~ then none will be used
# DISPLAY normally shows FIELD or whatever you specify as DISPLAY. Set DISPLAY to ~ to show nothing.
# if units is prefixed with # then we use a function to convert it to a scaled based figure using prefixes like K, M, G etc - the calculation is influenced by the BYTEFACTOR setting
# In DISPLAY/START/END anything enclosed in {} will be substituted by the value of that item of that name eg {DeviceID} will replace by the value contained in DeviceID eg C:
# eg BytesSentPersec will be shown as BytesSentPersec=XX, 
# eg BytesSentPersec|BYTES will be shown as BytesSentPersec=XXBytes, 
# eg _Used%|%|.|.||(|) will be shown as (45.2%)
display=_DisplayMsg||~|~| - ||
display=Name||OS| is |||
display=ServicePackMajorVersion||ServicePack| | ||
display=WindowsDirectory||Installed in| |. |(|)
display=NumberOfProcesses
display=MaxNumberOfProcesses|#
display=NumberOfUsers

# list the fields to be included in performance data
# the value can be in 2 formats - 
# 1) FIELD
# 2) FIELD|UNITS
# 3) FIELD|UNITS|DISPLAY
# In DISPLAY/UNITS anything enclosed in {} will be substituted by the value of that item of that name eg {DeviceID} will replace by the value contained in DeviceID eg C:
perf=NumberOfProcesses
# this next perf specification show how we can substitute data returned in the query into the display string of the performance data - sort of meaningless in this case but still shows how it can be done
perf=NumberOfUsers|users|User Count (Registered User={RegisteredUser})

# You only need this setting if you get WMI headeing fields that contain the delimiter "|".
# You probably don't ever need this, but it is available just in case
# Say the header comes back something like this:
# MaxNumberOfProcesses|Name|NumberOfProcesses|NumberOfUsers|RegisteredUser|ServicePackMajorVersion|WindowsDirectory
# All good - field names separated by |
# Notice how the Name field has been added by wmic and the fields are returned sorted in alphabetical order
# no need for a customer headerregex. This will be the case most of the time.
# If you ever need to use this refer to the comments on dataregex= as it works in the same way
headerregex=

# You only need this setting if you get WMI fields that contain the delimiter "|" - unfortunately this does happen
# Say the query comes back something like this:
# 4294967295|Microsoft Windows XP Professional|C:\WINDOWS|\Device\Harddisk0\Partition1|56|2|EveryOne|3|C:\WINDOWS
# Note that the Name field contains "Microsoft Windows XP Professional|C:\WINDOWS|\Device\Harddisk0\Partition1"
# This wrecks our standard field detection since there are now additional delimiters "|" in the data
# There are 2 ways to fix this - the easy way and the regular expression way
# 
# First the easy way - simply specify which fields you want to keep by listing the field numbers
# Field Numbers start at 1 and use a comma delimiter list
# So in the above example there are 9 fields delimited by |
# We don't want 3 and 4
dataregex=1,2,5,6,7,8,9

# If it is more complex than this (and yes this does happen eg event log queries) for example where \n is contained within the data itself
# then we have to specify our own custom regular expression to properly parse the data so that we can correctly recognise the columns
# the regex must entirely match the whole data row. We only collect a maximum of 9 fields for now with a custom regex
# the regex should end with \n since this marks the end of the line as returned by wmic
# the regex equivalent to the comma delimited list above is as follows:
# Field Num: 1      2     3    4     5      6      7      8     9
#                       SKIP SKIP <--- regex skips the fields directly below "SKIP" but retrieves the others
#dataregex=(.*?)\|(.*?)\|.*?\|.*?\|(.*?)\|(.*?)\|(.*?)\|(.*?)\|(.*?)\n
# it collects field 1,2 skips 3 and 4, and collects 5,6,7,8,9
# most of the time you will not need to specify a dataregex
# the regex above collects 7 fields out of what looks like 9 in the returned data
# if you need to you would normally just a regex just like it with more or less of the 
# (.*?) parts and delimiters \|
# eg row recognition when you want field1, field2, field4 and  NOT field3 would look like this
# dataregex=(.*?)\|(.*?)\|.*?\|(.*?)\n
# Note the use of .*? to match the 3rd field without () so that it does not become a field we capture
# If you get this regex wrong you will be unable to correctly identify returned data from the WMI query

# number of times to run the WMI query - not really used in the ini file for now
samples=1

# number of seconds delay between each WMI query - not really used in the ini file for now
delay=1

# NOTE on Variable Substitution Using {}
# Command line parameters available for substitution using {} into query=, display= and perf= ini settings:
# _arg1, _arg2, _arg3, _arg4, _arg5, _bytefactor, _delay, _host, _timeout
# Each of the above matches the appropriate command line argument

# Special values available for substitution using {} into display= and perf= ini settings:
# _ChecksOK = the number of WMI checks that completed OK
# _ItemCount = the number of data rows returned by the WMI query

# WMI field names to provide calculated data (eg sums) for - not really used in the ini file for now
calc=
# If you specify the names of WMI fields in the calc= settings then there are some extra fields available
# for substitution into display= and perf= settings
# For example if you have a WMI field returned called "Size" and you want to add them all together and provide as performance data,
# then you specify calc=Size and then the following variable become available for substituion
# {_RowSum_Size} and {_QuerySum_Size}
# You could then stick perf=_RowSum_Size and it provide "_RowSum_Size" as performance data
# Let me try and explain what these are ......
# Variables like "_QuerySum_FIELD" - sums up all the FIELD across all the queries for each Row Number - you can't use this here yet since you can't do multiple WMI queries (yet). We use it internally to help us for checkcpuq
# Variables like "_RowSum_FIELD" sum up all the FIELD within a single query - ie where multiple rows are returned
#  - you might use this for say, adding up total disk space. The WMI query for getting drive space can return info for all drives in a system
#     This is returned as the "Size" field out of WMI. If you have multiple drives you get multiple rows back in the WMI query and 
#     _RowSum_Size would be the total of all the Size fields in the query
#     We use this internally to help us with the checkdrivesize check



#----------------------------------------------------------

#==============================================================================
#==============================================================================
#========================= USER DEFINED CHECKS ================================
#==============================================================================
#==============================================================================

#----------------------------------------------------------
[checkio  logical]
requires=1.41
inihelp=<<EOT
MODE=checkio, SUBMODE=logical
=============================
   Check logical disk IO.
   ARG1: Name of the logical Windows drive to check eg C:
      Use _Total to check all drives combined.
EOT

# select only one row specific to the disk we are interested in
query=SELECT * FROM Win32_PerfFormattedData_PerfDisk_LogicalDisk WHERE Name="{_arg1}"

test=PercentDiskTime
test=PercentIdleTime
test=PercentDiskReadTime
test=PercentDiskWriteTime
test=DiskReadBytesPersec
test=DiskReadsPersec
test=DiskWriteBytesPersec
test=DiskWritesPersec
test=CurrentDiskQueueLength
test=AvgDiskQueueLength
test=AvgDiskReadQueueLength
test=AvgDiskWriteQueueLength

display=_DisplayMsg||~|~| - ||
display=Name||Logical Drive Name|="|||"
display=PercentDiskTime
display=PercentIdleTime
display=PercentDiskReadTime
display=PercentDiskWriteTime
display=DiskReadBytesPersec
display=DiskReadsPersec
display=DiskWriteBytesPersec
display=DiskWritesPersec
display=CurrentDiskQueueLength
display=AvgDiskQueueLength
display=AvgDiskReadQueueLength
display=AvgDiskWriteQueueLength

perf=PercentDiskTime
perf=PercentIdleTime
perf=PercentDiskReadTime
perf=PercentDiskWriteTime
perf=DiskReadBytesPersec
perf=DiskReadsPersec
perf=DiskWriteBytesPersec
perf=DiskWritesPersec
perf=CurrentDiskQueueLength
perf=AvgDiskQueueLength
perf=AvgDiskReadQueueLength
perf=AvgDiskWriteQueueLength


#----------------------------------------------------------
[checkio physical]
requires=1.41
inihelp=<<EOT
MODE=checkio, SUBMODE=physical
=============================
   Check physical disk IO.
   ARG1: Name of the physical Windows drive to check eg C: 
      Use _Total to check all drives combined.
EOT

# select only one row specific to the disk we are interested in
# query needs to include "like" since the physical drive names might not be fully as expected eg "01 C:"
query=SELECT * FROM Win32_PerfFormattedData_PerfDisk_PhysicalDisk WHERE Name LIKE "%{_arg1}"

test=PercentDiskTime
test=PercentIdleTime
test=PercentDiskReadTime
test=PercentDiskWriteTime
test=DiskReadBytesPersec
test=DiskReadsPersec
test=DiskWriteBytesPersec
test=DiskWritesPersec
test=CurrentDiskQueueLength
test=AvgDiskQueueLength
test=AvgDiskReadQueueLength
test=AvgDiskWriteQueueLength

display=_DisplayMsg||~|~| - ||
display=Name||Physical Drive Name|="|||"
display=PercentDiskTime
display=PercentIdleTime
display=PercentDiskReadTime
display=PercentDiskWriteTime
display=DiskReadBytesPersec
display=DiskReadsPersec
display=DiskWriteBytesPersec
display=DiskWritesPersec
display=CurrentDiskQueueLength
display=AvgDiskQueueLength
display=AvgDiskReadQueueLength
display=AvgDiskWriteQueueLength

perf=PercentDiskTime
perf=PercentIdleTime
perf=PercentDiskReadTime
perf=PercentDiskWriteTime
perf=DiskReadBytesPersec
perf=DiskReadsPersec
perf=DiskWriteBytesPersec
perf=DiskWritesPersec
perf=CurrentDiskQueueLength
perf=AvgDiskQueueLength
perf=AvgDiskReadQueueLength
perf=AvgDiskWriteQueueLength
#----------------------------------------------------------

#----------------------------------------------------------
[checkproc cmdline]
requires=1.41
inihelp=<<EOT
MODE=checkproc, SUBMODE=cmdline
===============================
   An ini implementation similar to checkprocess. 
   ARG1: The exact command line to search for. Use / instead of \\.
      e.g. C:/WINDOWS/system32/services.exe
   Use -n and/or NODATAEXIT settings to control what happens if no matching process is found
EOT

# we need to convert back / to \ for this one
slashconversion=1

# select only one row specific to the disk we are interested in
query=select Name,CommandLine from Win32_Process WHERE CommandLine = "{_arg1}"

test=_ItemCount

display=_DisplayMsg||~|~| - ||
display=_ItemCount| Instance(s)|Found |~|~|| of "{_arg1}" running.

perf=_ItemCount||Process Count

#----------------------------------------------------------
#----------------------------------------------------------
#----------------------------------------------------------
#----------------------------------------------------------
#----------------------------------------------------------
