
# Get additional ini file configurations and share your configurations 
# at http://www.edcint.co.nz

# This is an ini file for check_wmi_plus.pl - nagios plugin for agentless checking of Windows
#
# Copyright (C) 2011 Matthew Jurgens
# You can email me using: mjurgens (the at goes here) edcint.co.nz
# Download link can be found at http://www.edcint.co.nz

[ini]
# information about the ini file
author=Matthew Jurgens
# ini file version
version=1.1

#==============================================================================
#==============================================================================
#====================== SAMPLES and DOCUMENTATION =============================
#==============================================================================
#==============================================================================

#----------------------------------------------------------
# the ini section names are specified according to 2 formats
# 1) [MODE]
# 2) [MODE SUBMODE]
# You use the check defined in a specific ini section by specifying 
# -m MODE or 
# -m MODE -s SUBMODE 
# on the plugin command line
# this helps us group similar checks together
# eg to run this minimal check which belongs the sample group
# -m sample -s minimal
[sample minimal]
# this help is displayed only when -m MODE or -m MODE -s SUBMODE are specified AND --inihelp is used on the command line
inihelp=<<EOT
MODE=sample, SUBMODE=minimal
============================
   Help for a sample check that specifies only a minimal amount of configuration in the ini File.
   This sample simply displays the Name of the Operating System
   It has no warning/critical specification and provides no performance data
EOT

query=Select Caption From Win32_OperatingSystem

# the first display field is the standard one we use for the core plugin checks. It includes the status of the check and what triggered a warning/critical state (if any)
display=_DisplayMsg||~|~| - ||
display=Caption


#----------------------------------------------------------
# eg to run this full check which belongs the sample group
# -m sample -s full
[sample full]

# the version of the plugin that this section requires to operate
requires=1.41

# this help is displayed only when -m MODE or -m MODE -s SUBMODE are specified AND --inihelp is used on the command line
inihelp=<<EOT
MODE=sample, SUBMODE=full
=========================
   Help for a sample check that specifies all currently possible fields in the ini File
   
EOT

# Note:
# use the -d parameter to debug and see the query and the output returned from wmic 
# this helps build the correct query, get the test=, display= and perf= field names correct
# and shows you if you need to specify headerregex= and dataregex=

# The documentation for WMI for this query can be found at
# http://msdn.microsoft.com/en-us/library/aa394239%28v=VS.85%29.aspx
# Note that sometimes the field names returned by wmic sometime differ slightly to those listed by Microsoft
# Most of them are ok by some do vary (most in capitalisation)
# eg wmic returns "FileControlBytesPersec" but Microsoft lists FileControlBytesPerSec

# only use this field if the WMI query needs to have / converted to \
# useful to make the command line more friendly for the user since the use of \ on the command line can get tricky
slashconversion=1

# the Name field sometimes gets returned in by wmic for most queries without being specified
# it seems to be OS version dependent. 
# We recommend always specifying if it in the the WMI Class it to make sure queries are OS version indpendent
# Sometimes the Name field contains | - see info on dataregex field to fix this if needed
# for some queries you might add some thing like "WHERE Name="{_arg1}"
# this will allow you to select a specific returned row when multiple are returned
# this sample does not use it but you will find others below that do
query=Select Name,FreePhysicalMemory,TotalVisibleMemorySize,RegisteredUser,ServicePackMajorVersion,NumberOfProcesses,WindowsDirectory,NumberOfUsers,MaxNumberOfProcesses From Win32_OperatingSystem

# create custom fields that can be used for display, perf data or testing warn/crit criteria
# for example you might want to average to readings of a WMI Raw counter
# the format of this field is
# NEWFIELDNAME,FUNCTION,FUNCTIONPARAMETERS
# where FUNCTIONPARAMETERS itself is a comma delimited list and specific to the FUNCTION
# we like to start our NEWFIELDNAMEs with an _ as you will see in the samples
# where we take 2 WMI values and calculate a percentage from them like this percentage=100* PARAM1/PARAM2
# we then apply the sprintf format string %.1f to give 1 decimal place
# we can then use the new field, _FreeMemPercent in test=, display= and perf= settings
# in this particular example we have
#           NEWFIELDNAME   FUNCTION PARAM1             PARAM2                 PARAM3
customfield=_FreeMemPercent,percent,FreePhysicalMemory,TotalVisibleMemorySize,%.1f,

# DOCUMENT ALL AVAILABLE customfield FUNCTIONS
# ----- percent - documented a few lines above as the example

# these next function types actually directly related to the WMI raw data type. See the http references.
# ----- PERF_100NSEC_TIMER_INV
   # refer http://technet.microsoft.com/en-us/library/cc757283%28WS.10%29.aspx
   # this is a calculation like for checkcpu found on 
   # it requires two completed WMI queries (sample=2)
   # Formula = (1- (   (N2 - N1) / (D2 - D1) /F   )) x 100
   # we assume that the Timefield (D) we need is Timestamp_Sys100NS
   # 
   # the parameters for this "function" are
   # SOURCEFIELD,SPRINTF_SPEC
   # where 
   # SOURCEFIELD [0] is the WMI Field to base this on eg PercentProcessorTime - required
   # SPRINTF_SPEC [1] - a format specification passed directly to sprintf to format the result (can leave blank)
# ----- PERF_COUNTER_COUNTER and PERF_COUNTER_BULK_COUNT
   # refer http://technet.microsoft.com/en-us/library/cc740048%28WS.10%29.aspx
   # it requires two completed WMI queries (sample=2)
   # Formula = (Nx - N0) / ((Dx - D0) / F)
   # we assume that the Timefield (D) we need is Timestamp_Sys100NS
   # we assume that the Frequency (F) we need is Frequency_Sys100NS
   # 
   # the parameters for this "function" are
   # SOURCEFIELD,SPRINTF_SPEC
   # where 
   # SOURCEFIELD [0] is the WMI Field to base this on eg PercentProcessorTime - required
   # SPRINTF_SPEC [1] - a format specification passed directly to sprintf to format the result (can leave blank)
# ----- PERF_PRECISION_100NS_TIMER and PERF_COUNTER_100NS_QUEUELEN_TYPE
   # refer http://technet.microsoft.com/en-us/library/cc756128%28WS.10%29.aspx
   # it requires two completed WMI queries (sample=2)
   # Formula = N1 - N0 / D1 - D0
   # we assume that the Timefield (D) we need is Timestamp_Sys100NS
   #
   # REfer http://technet.microsoft.com/en-us/library/cc781696%28WS.10%29.aspx for PERF_COUNTER_100NS_QUEUELEN_TYPE
   # This one seems to give correct results calculated like this but has a slightly different formula on the reference page?
   # 
   # the parameters for this "function" are
   # SOURCEFIELD,MULTIPLIER,SPRINTF_SPEC
   # where 
   # SOURCEFIELD [0] is the WMI Field to base this on eg PercentProcessorTime - required
   # SPRINTF_SPEC [1] - a format specification passed directly to sprintf to format the result (can leave blank)
   # MULTIPLIER [2] is a multiplier useful to make the fraction a percentage eg 100
   # INVERT [3] take the value away from this number. Useful in the following example eg set this value to 100 to show busy percentage where counter value is an idle percentage. Applied after the multiplier
   #

# list the fields that we want to be able to specify warning/critical values against
# the first one defined is the default if none is specified in a warn/crit specification on the command line
test=NumberOfProcesses
test=NumberOfUsers
test=_FreeMemPercent

# list the fields that are displayed in the plugin output
# fields displayed in the order that they are defined and at least one is always required
# the value can be in 3 formats - 
# 1) FIELD (where we just display this field like FIELD=xx,
# 2) FIELD|UNITS (where we just display this field like FIELD=xxUNITS,
# 3) FIELD|UNITS|DISPLAY|SEP|DELIM|START|END
# where we display this FIELD like STARTDISPLAYSEPxxUNITSENDDELIM
# the default DELIM is comma space, if DELIM is set to ~ then none will be used
# the default SEP is =, if SEP is set to ~ then none will be used
# DISPLAY normally shows FIELD or whatever you specify as DISPLAY. Set DISPLAY to ~ to show nothing.
# if units is prefixed with # then we use a function to convert it to a scaled based figure using prefixes like K, M, G etc - the calculation is influenced by the BYTEFACTOR setting
# In DISPLAY/START/END anything enclosed in {} will be substituted by the value of that item of that name eg {DeviceID} will replace by the value contained in DeviceID eg C:
# eg BytesSentPersec will be shown as BytesSentPersec=XX, 
# eg BytesSentPersec|BYTES will be shown as BytesSentPersec=XXBytes, 
# eg _Used%|%|.|.||(|) will be shown as (45.2%)
# There are the following predefined fields -
# _StatusType - shows the status of the check eg OK, Warning etc
# _Triggers - shows which FIELDS triggered a warn/critical state
# _DisplayMsg - is _StatusType combined with _Triggers. We use this one all the time.
# _ChecksOK = the number of WMI checks that completed OK
# _ItemCount = the number of data rows returned by the WMI query
display=_DisplayMsg||~|~| - ||
display=Name||OS| is |||
display=ServicePackMajorVersion||ServicePack| | ||
display=WindowsDirectory||Installed in| |. |(|)
display=_FreeMemPercent|%
display=NumberOfProcesses
display=MaxNumberOfProcesses|#
display=NumberOfUsers

# list the fields to be included in performance data
# the value can be in 2 formats - 
# 1) FIELD
# 2) FIELD|UNITS
# 3) FIELD|UNITS|DISPLAY
# In DISPLAY/UNITS anything enclosed in {} will be substituted by the value of that item of that name eg {DeviceID} will replace by the value contained in DeviceID eg C:
perf=NumberOfProcesses
# this next perf specification show how we can substitute data returned in the query into the display string of the performance data - sort of meaningless in this case but still shows how it can be done
perf=NumberOfUsers|users|User Count (Registered User={RegisteredUser})
perf=_FreeMemPercent|%

# You only need this setting if you get WMI headeing fields that contain the delimiter "|".
# You probably don't ever need this, but it is available just in case
# Say the header comes back something like this:
# FreePhysicalMemory|MaxNumberOfProcesses|Name|NumberOfProcesses|NumberOfUsers|RegisteredUser|ServicePackMajorVersion|TotalVisibleMemorySize|WindowsDirectory
# All good - field names separated by |
# Notice how the Name field has been added by wmic and the fields are returned sorted in alphabetical order
# no need for a customer headerregex. This will be the case most of the time.
# If you ever need to use this refer to the comments on dataregex= as it works in the same way
headerregex=

# You only need this setting if you get WMI fields that contain the delimiter "|" - unfortunately this does happen
# Say the query comes back something like this:
#    1        2                     3                      4                   5              6  7    8     9    10      11
# 288976|4294967295|Microsoft Windows XP Professional|C:\WINDOWS|\Device\Harddisk0\Partition1|55|2|EveryOne|3|1228272|C:\WINDOWS
# Note that the Name field contains "Microsoft Windows XP Professional|C:\WINDOWS|\Device\Harddisk0\Partition1"
# This wrecks our standard field detection since there are now additional delimiters "|" in the data
# There are 2 ways to fix this - the easy way and the regular expression way
# 
# First the easy way - simply specify which fields you want to keep by listing the field numbers
# Field Numbers start at 1 and use a comma delimiter list
# So in the above example there are 9 fields delimited by |
# We don't want 4 and 5 (so we don't list them below)
dataregex=1,2,3,6,7,8,9,10,11

# If it is more complex than this (and yes this does happen eg event log queries) for example where \n is contained within the data itself
# then we have to specify our own custom regular expression to properly parse the data so that we can correctly recognise the columns
# the regex must entirely match the whole data row. We only collect a maximum of 9 fields for now with a custom regex
# the regex should end with \n since this marks the end of the line as returned by wmic
# the regex equivalent to the comma delimited list above is as follows:
# Field Num: 1      2      3     4     5    6     7      8     9        10    11 
#                               SKIP SKIP <--- regex skips the fields directly below "SKIP" but retrieves the others
#dataregex=(.*?)\|(.*?)\|(.*?)\|.*?\|.*?\|(.*?)\|(.*?)\|(.*?)\|(.*?)\|(.*?)\|(.*?)\n
# it collects field 1,2,3 skips 4 and 5, and collects 6,7,8,9,10,11
# most of the time you will not need to specify a dataregex
# the regex above collects 9 fields out of what looks like 11 in the returned data
# if you need to you would normally just a regex just like it with more or less of the 
# (.*?) parts and delimiters \|
# eg row recognition when you want field1, field2, field4 and  NOT field3 would look like this
# dataregex=(.*?)\|(.*?)\|.*?\|(.*?)\n
# Note the use of .*? to match the 3rd field without () so that it does not become a field we capture
# If you get this regex wrong you will be unable to correctly identify returned data from the WMI query

# number of times to run the WMI query - not really used in the ini file for now
samples=1

# number of seconds delay between each WMI query - not really used in the ini file for now
delay=1

# NOTE on Variable Substitution Using {}
# Command line parameters available for substitution using {} into query=, display= and perf= ini settings:
# _arg1, _arg2, _arg3, _arg4, _arg5, _bytefactor, _delay, _host, _timeout
# Each of the above matches the appropriate command line argument

# Special values available for substitution using {} into display= and perf= ini settings:
# _ChecksOK = the number of WMI checks that completed OK
# _ItemCount = the number of data rows returned by the WMI query

# WMI field names to provide calculated data (eg sums) for - not really used in the ini file for now
calc=
# If you specify the names of WMI fields in the calc= settings then there are some extra fields available
# for substitution into display= and perf= settings
# For example if you have a WMI field returned called "Size" and you want to add them all together and provide as performance data,
# then you specify calc=Size and then the following variable become available for substitution
# {_ColSum_Size} and {_QuerySum_Size}
# You could then stick perf=_ColSum_Size and it will provide "_ColSum_Size" as performance data
# Let me try and explain what these are ......
# Variables like "_QuerySum_FIELD" - sums up all the FIELD across all the queries for each Row Number. We use it internally to help us for checkcpuq
# Variables like "_ColSum_FIELD" sum up all the FIELDs (columns) within a single query - ie where multiple rows are returned
#  - you might use this for say, adding up total disk space. The WMI query for getting drive space can return info for all drives in a system
#     This is returned as the "Size" field out of WMI. If you have multiple drives you get multiple rows back in the WMI query and 
#     _ColSum_Size would be the total of all the Size fields in the query
#     We use this internally to help us with the checkdrivesize check

# create a list of fields that come back in the WMI Query
# FORMAT is createlist=NEWFIELDNAME|LINEDELIM|FIELDDELIM|UNIQUE|FIELD1,FIELD2,etc
# where  NEWFIELDNAME is the new field name to create eg _Processlist
#        LINEDELIM is the delimiter to place when reaching the end of a WMI Query row
#        FIELDDELIM is the delimiter to place between WMI fields on the same row
#        UNIQUE is set to 1 to only show unique items, set to 0 to show all items
createlist=
# normally this is most usefull when multiple rows are returned from a WMI query eg a list of processes
# there is a good example of this being used in the [checkproc memory] section to create a list of process names with PIDs
# eg createlist=_ProcessList|),   | (PID=|1|Name,IDProcess


#----------------------------------------------------------

#==============================================================================
#==============================================================================
#========================= USER DEFINED CHECKS ================================
#==============================================================================
#==============================================================================

#----------------------------------------------------------
[checkio logical]
requires=1.42
inihelp=<<EOT
MODE=checkio, SUBMODE=logical
=============================
   Check logical disk IO. 
   These disks checks use WMI Raw counters to calculate values over a given timeperiod. 
   This is much more accurate than taking Formatted WMI values.
   ARG1: Name of the logical Windows drive to check eg C:
      Use _Total to check all drives combined.
   DELAY: (optional) specifies the number of seconds over which the CPU utilisation is calculated. Default 5.
      The longer you can make this without timing out, the more accurate it will be. if specifying longer values
      you may also need to use the -t parameter to set a longer script timeout.
      
   Note that some of the PercentDisk values seem to give incorrect values. Use with caution.
EOT

# select only one row specific to the disk we are interested in
query=SELECT * FROM Win32_PerfRawData_PerfDisk_LogicalDisk WHERE Name="{_arg1}"

# run 2 WMI queries, 5 seconds apart
samples=2
delay=5

customfield=_PercentIdleTime,PERF_PRECISION_100NS_TIMER,PercentIdleTime,%.0f,100
customfield=_PercentBusyTime,PERF_PRECISION_100NS_TIMER,PercentIdleTime,%.0f,100,100

# these ones seem to give results over 100%?
customfield=_PercentDiskTime,PERF_PRECISION_100NS_TIMER,PercentDiskTime,%.0f,100
customfield=_PercentDiskReadTime,PERF_PRECISION_100NS_TIMER,PercentDiskReadTime,%.0f,100
customfield=_PercentDiskWriteTime,PERF_PRECISION_100NS_TIMER,PercentDiskWriteTime,%.0f,100

customfield=_DiskReadBytesPersec,PERF_COUNTER_BULK_COUNT,DiskReadBytesPersec,%.0f
customfield=_DiskReadsPersec,PERF_COUNTER_COUNTER,DiskReadsPersec,%.0f
customfield=_DiskWriteBytesPersec,PERF_COUNTER_BULK_COUNT,DiskWriteBytesPersec,%.0f
customfield=_DiskWritesPersec,PERF_COUNTER_COUNTER,DiskWritesPersec,%.0f

# might not work in Server 2003
customfield=_AvgDiskQueueLength,PERF_COUNTER_100NS_QUEUELEN_TYPE,AvgDiskQueueLength,%.1f
customfield=_AvgDiskReadQueueLength,PERF_COUNTER_100NS_QUEUELEN_TYPE,AvgDiskReadQueueLength,%.1f
customfield=_AvgDiskWriteQueueLength,PERF_COUNTER_100NS_QUEUELEN_TYPE,AvgDiskWriteQueueLength,%.1f

test=_PercentIdleTime
test=_PercentBusyTime
test=_PercentDiskTime
test=_PercentDiskReadTime
test=_PercentDiskWriteTime
test=_DiskReadBytesPersec
test=_DiskReadsPersec
test=_DiskWriteBytesPersec
test=_DiskWritesPersec
test=CurrentDiskQueueLength
test=_AvgDiskQueueLength
test=_AvgDiskReadQueueLength
test=_AvgDiskWriteQueueLength

display=_DisplayMsg||~|~| - ||
display=Name||Logical Drive Name|="|||"
display=_PercentIdleTime|%
display=_PercentBusyTime|%
display=_PercentDiskTime|%
display=_PercentDiskReadTime|%
display=_PercentDiskWriteTime|%
display=_DiskReadBytesPersec|#B/sec
display=_DiskReadsPersec|#/sec
display=_DiskWriteBytesPersec|#B/sec
display=_DiskWritesPersec|#/sec
display=CurrentDiskQueueLength
display=_AvgDiskQueueLength
display=_AvgDiskReadQueueLength
display=_AvgDiskWriteQueueLength

perf=_PercentIdleTime
perf=_PercentBusyTime
perf=_PercentDiskTime
perf=_PercentDiskReadTime
perf=_PercentDiskWriteTime
perf=_DiskReadBytesPersec
perf=_DiskReadsPersec
perf=_DiskWriteBytesPersec
perf=_DiskWritesPersec
perf=CurrentDiskQueueLength
perf=_AvgDiskQueueLength
perf=_AvgDiskReadQueueLength
perf=_AvgDiskWriteQueueLength


#----------------------------------------------------------
[checkio physical]
requires=1.42
inihelp=<<EOT
MODE=checkio, SUBMODE=physical
==============================
   Check physical disk IO. 
   These disks checks use WMI Raw counters to calculate values over a given timeperiod. 
   This is much more accurate than taking Formatted WMI values.
   ARG1: Name of the logical Windows drive to check eg C:
      Use _Total to check all drives combined.
   DELAY: (optional) specifies the number of seconds over which the CPU utilisation is calculated. Default 5.
      The longer you can make this without timing out, the more accurate it will be. if specifying longer values
      you may also need to use the -t parameter to set a longer script timeout.
      
   Note that some of the PercentDisk values seem to give incorrect values. Use with caution.
EOT

# select only one row specific to the disk we are interested in
# query needs to include "like" since the physical drive names might not be fully as expected eg "01 C:"
query=SELECT * FROM Win32_PerfRawData_PerfDisk_PhysicalDisk WHERE Name LIKE "%{_arg1}"

# run 2 WMI queries, 5 seconds apart
samples=2
delay=5

customfield=_PercentIdleTime,PERF_PRECISION_100NS_TIMER,PercentIdleTime,%.0f,100
customfield=_PercentBusyTime,PERF_PRECISION_100NS_TIMER,PercentIdleTime,%.0f,100,100

# these ones seem to give results over 100%?
customfield=_PercentDiskTime,PERF_PRECISION_100NS_TIMER,PercentDiskTime,%.0f,100
customfield=_PercentDiskReadTime,PERF_PRECISION_100NS_TIMER,PercentDiskReadTime,%.0f,100
customfield=_PercentDiskWriteTime,PERF_PRECISION_100NS_TIMER,PercentDiskWriteTime,%.0f,100

customfield=_DiskReadBytesPersec,PERF_COUNTER_BULK_COUNT,DiskReadBytesPersec,%.0f
customfield=_DiskReadsPersec,PERF_COUNTER_COUNTER,DiskReadsPersec,%.0f
customfield=_DiskWriteBytesPersec,PERF_COUNTER_BULK_COUNT,DiskWriteBytesPersec,%.0f
customfield=_DiskWritesPersec,PERF_COUNTER_COUNTER,DiskWritesPersec,%.0f

# might not work in Server 2003
customfield=_AvgDiskQueueLength,PERF_COUNTER_100NS_QUEUELEN_TYPE,AvgDiskQueueLength,%.1f
customfield=_AvgDiskReadQueueLength,PERF_COUNTER_100NS_QUEUELEN_TYPE,AvgDiskReadQueueLength,%.1f
customfield=_AvgDiskWriteQueueLength,PERF_COUNTER_100NS_QUEUELEN_TYPE,AvgDiskWriteQueueLength,%.1f

test=_PercentIdleTime
test=_PercentBusyTime
test=_PercentDiskTime
test=_PercentDiskReadTime
test=_PercentDiskWriteTime
test=_DiskReadBytesPersec
test=_DiskReadsPersec
test=_DiskWriteBytesPersec
test=_DiskWritesPersec
test=CurrentDiskQueueLength
test=_AvgDiskQueueLength
test=_AvgDiskReadQueueLength
test=_AvgDiskWriteQueueLength

display=_DisplayMsg||~|~| - ||
display=Name||Logical Drive Name|="|||"
display=_PercentIdleTime|%
display=_PercentBusyTime|%
display=_PercentDiskTime|%
display=_PercentDiskReadTime|%
display=_PercentDiskWriteTime|%
display=_DiskReadBytesPersec|#B/sec
display=_DiskReadsPersec|#/sec
display=_DiskWriteBytesPersec|#B/sec
display=_DiskWritesPersec|#/sec
display=CurrentDiskQueueLength
display=_AvgDiskQueueLength
display=_AvgDiskReadQueueLength
display=_AvgDiskWriteQueueLength

perf=_PercentIdleTime
perf=_PercentBusyTime
perf=_PercentDiskTime
perf=_PercentDiskReadTime
perf=_PercentDiskWriteTime
perf=_DiskReadBytesPersec
perf=_DiskReadsPersec
perf=_DiskWriteBytesPersec
perf=_DiskWritesPersec
perf=CurrentDiskQueueLength
perf=_AvgDiskQueueLength
perf=_AvgDiskReadQueueLength
perf=_AvgDiskWriteQueueLength

#----------------------------------------------------------
[checkio old_logical]
requires=1.41
inihelp=<<EOT
MODE=checkio, SUBMODE=old_logical
=================================
   Check logical disk IO. Superseeded by checkio logical.
   ARG1: Name of the logical Windows drive to check eg C:
      Use _Total to check all drives combined.
EOT

# select only one row specific to the disk we are interested in
query=SELECT * FROM Win32_PerfFormattedData_PerfDisk_LogicalDisk WHERE Name="{_arg1}"

test=PercentDiskTime
test=PercentIdleTime
test=PercentDiskReadTime
test=PercentDiskWriteTime
test=DiskReadBytesPersec
test=DiskReadsPersec
test=DiskWriteBytesPersec
test=DiskWritesPersec
test=CurrentDiskQueueLength
test=AvgDiskQueueLength
test=AvgDiskReadQueueLength
test=AvgDiskWriteQueueLength

display=_DisplayMsg||~|~| - ||
display=Name||Logical Drive Name|="|||"
display=PercentDiskTime
display=PercentIdleTime
display=PercentDiskReadTime
display=PercentDiskWriteTime
display=DiskReadBytesPersec
display=DiskReadsPersec
display=DiskWriteBytesPersec
display=DiskWritesPersec
display=CurrentDiskQueueLength
display=AvgDiskQueueLength
display=AvgDiskReadQueueLength
display=AvgDiskWriteQueueLength

perf=PercentDiskTime
perf=PercentIdleTime
perf=PercentDiskReadTime
perf=PercentDiskWriteTime
perf=DiskReadBytesPersec
perf=DiskReadsPersec
perf=DiskWriteBytesPersec
perf=DiskWritesPersec
perf=CurrentDiskQueueLength
perf=AvgDiskQueueLength
perf=AvgDiskReadQueueLength
perf=AvgDiskWriteQueueLength

#----------------------------------------------------------
[checkio old_physical]
requires=1.41
inihelp=<<EOT
MODE=checkio, SUBMODE=old_physical
==================================
   Check physical disk IO. Superseeded by checkio physical.
   ARG1: Name of the physical Windows drive to check eg C: 
      Use _Total to check all drives combined.
EOT

# select only one row specific to the disk we are interested in
# query needs to include "like" since the physical drive names might not be fully as expected eg "01 C:"
query=SELECT * FROM Win32_PerfFormattedData_PerfDisk_PhysicalDisk WHERE Name LIKE "%{_arg1}"

test=PercentDiskTime
test=PercentIdleTime
test=PercentDiskReadTime
test=PercentDiskWriteTime
test=DiskReadBytesPersec
test=DiskReadsPersec
test=DiskWriteBytesPersec
test=DiskWritesPersec
test=CurrentDiskQueueLength
test=AvgDiskQueueLength
test=AvgDiskReadQueueLength
test=AvgDiskWriteQueueLength

display=_DisplayMsg||~|~| - ||
display=Name||Physical Drive Name|="|||"
display=PercentDiskTime
display=PercentIdleTime
display=PercentDiskReadTime
display=PercentDiskWriteTime
display=DiskReadBytesPersec
display=DiskReadsPersec
display=DiskWriteBytesPersec
display=DiskWritesPersec
display=CurrentDiskQueueLength
display=AvgDiskQueueLength
display=AvgDiskReadQueueLength
display=AvgDiskWriteQueueLength

perf=PercentDiskTime
perf=PercentIdleTime
perf=PercentDiskReadTime
perf=PercentDiskWriteTime
perf=DiskReadBytesPersec
perf=DiskReadsPersec
perf=DiskWriteBytesPersec
perf=DiskWritesPersec
perf=CurrentDiskQueueLength
perf=AvgDiskQueueLength
perf=AvgDiskReadQueueLength
perf=AvgDiskWriteQueueLength
#----------------------------------------------------------

#----------------------------------------------------------
[checkproc cmdline]
requires=1.41
inihelp=<<EOT
MODE=checkproc, SUBMODE=cmdline
===============================
   An ini implementation similar to checkprocess. 
   ARG1: The exact command line to search for. Use / instead of \\.
      e.g. C:/WINDOWS/system32/services.exe
   Use -n and/or NODATAEXIT settings to control what happens if no matching process is found
EOT

# we need to convert back / to \ for this one
slashconversion=1

# select only one row specific to the disk we are interested in
query=select Name,CommandLine from Win32_Process WHERE CommandLine = "{_arg1}"

test=_ItemCount

display=_DisplayMsg||~|~| - ||
display=_ItemCount| Instance(s)|Found |~|~|| of "{_arg1}" running.

perf=_ItemCount||Process Count

#----------------------------------------------------------
[checkproc memory]
requires=1.42
inihelp=<<EOT
MODE=checkproc, SUBMODE=memory
===============================
   Check memory details for individual processes
   ARG1: The processname to look for. Use % for wildcards.
      The process name typically only includes the actual file name minus its suffix eg firefox, svchost
      If there are multiple instances eg svchost, then some versions of Windows have them named all the same while others
      such as Windows 2008 Server, have them numbered eg svchost#1, svchost#2, svchost#3. To get all svchost processes you
      need to set ARG1 to svchost%
      To view all processes set ARG1 to "%" and the full process list will be included in the plugin output.
   Use -n and/or NODATAEXIT settings to control what happens if no matching process is found
EOT

# select only one row specific to the disk we are interested in
# I have a feeling that other fields will end up being useful in this query ......
query=select Name,IDProcess,PrivateBytes,VirtualBytes,WorkingSet from Win32_PerfFormattedData_PerfProc_Process WHERE Name like "{_arg1}"

# calculate sums for these fields
calc=PrivateBytes,VirtualBytes,WorkingSet

#createlist=NEWFIELDNAME|LINEDELIM|FIELDDELIM|UNIQUE|FIELD1,FIELD2,etc
# create a list of the process names found
createlist=_ProcessList|),   | (PID=|1|Name,IDProcess

test=_ItemCount
test=_ColSum_PrivateBytes
test=_ColSum_WorkingSet
test=_ColSum_VirtualBytes

display=_DisplayMsg||~|~| - ||
display=_ItemCount| Instance(s)|Found |~|. || of "{_arg1}" running
display=_ColSum_PrivateBytes|#B|Total Private Memory||||
display=_ColSum_WorkingSet|#B|Total Working Set||||
display=_ColSum_VirtualBytes|#B|Total Virtual Memory||~||
display=_ProcessList||\nProcesses Found are |~|~||


perf=_ItemCount||Process Count
perf=_ColSum_PrivateBytes|Bytes|Total Private Memory
perf=_ColSum_WorkingSet|Bytes|Total Working Set
perf=_ColSum_VirtualBytes|Bytes|Total Virtual Memory


#----------------------------------------------------------
[checkts sessions]
requires=1.41
inihelp=<<EOT
MODE=checkts, SUBMODE=sessions
==============================
   Check Terminal Services Sessions.
EOT

query=SELECT * FROM Win32_PerfRawData_TermService_TerminalServices

test=ActiveSessions
test=InactiveSessions
test=TotalSessions

display=_DisplayMsg||~|~| - ||
display=ActiveSessions
display=InactiveSessions
display=TotalSessions

perf=ActiveSessions
perf=InactiveSessions
perf=TotalSessions

#----------------------------------------------------------
[checkts sessioninfo]
requires=1.42
inihelp=<<EOT
MODE=checkts, SUBMODE=sessioninfo
=================================
   Check Terminal Services Session Info for specific sessions.
   ARG1: Name of the TS Session eg console
      Note: Not tested on a real terminal services server - you might need to play with this to get what you need.
         Not quite sure what the session names really look like except for "console".
         Please post notes back to www.edcint.co.nz/checkwmiplus to help others. Thanks
   DELAY: (optional) specifies the number of seconds over which the CPU utilisation is calculated. Default 5.
      The longer you can make this without timing out, the more accurate it will be. if specifying longer values
      you may also need to use the -t parameter to set a longer script timeout.
EOT

query=SELECT * FROM Win32_PerfRawData_TermService_TerminalServicesSession where Name = "{_arg1}"

# run 2 WMI queries, 5 seconds apart
samples=2
delay=5

# I suspect some of these fields might be per time figures but the documentation does not say .....
customfield=_InputBytes,PERF_COUNTER_COUNTER,InputBytes,%.0f
customfield=_InputCompressedBytes,PERF_COUNTER_COUNTER,InputCompressedBytes,%.0f
customfield=_OutputBytes,PERF_COUNTER_COUNTER,OutputBytes,%.0f
customfield=_OutputCompressedBytes,PERF_COUNTER_COUNTER,OutputCompressedBytes,%.0f
customfield=_PercentProcessorTime,PERF_100NSEC_TIMER,PercentProcessorTime,%.0f
customfield=_TotalBytes,PERF_COUNTER_COUNTER,TotalBytes,%.0f


test=_InputBytes
test=_InputCompressedBytes
test=InputErrors
test=InputTimeouts
test=_OutputBytes
test=_OutputCompressedBytes
test=OutputErrors
test=OutputTimeouts
test=_PercentProcessorTime
test=PrivateBytes
test=ThreadCount
test=_TotalBytes
test=TotalErrors
test=TotalTimeouts

display=_DisplayMsg||~|~| - ||
display=Name||Session Name|="|||"
display=_InputBytes|#B
display=_InputCompressedBytes|#B
display=InputErrors|#
display=InputTimeouts|#
display=_OutputBytes|#B
display=_OutputCompressedBytes|#B
display=OutputErrors|#
display=OutputTimeouts|#
display=_PercentProcessorTime|%
display=PrivateBytes|#B
display=ThreadCount|#
display=_TotalBytes|#B
display=TotalErrors|#
display=TotalTimeouts|#

perf=_InputBytes
perf=_InputCompressedBytes
perf=InputErrors
perf=InputTimeouts
perf=_OutputBytes
perf=_OutputCompressedBytes
perf=OutputErrors
perf=OutputTimeouts
perf=_PercentProcessorTime
perf=PrivateBytes
perf=ThreadCount
perf=_TotalBytes
perf=TotalErrors
perf=TotalTimeouts

#----------------------------------------------------------
[checkiis users]
requires=1.42
inihelp=<<EOT
MODE=checkiis
=============
   Check user stats for a Microsoft IIS Web Server.
   Tested for IIS version 6. Only tested on a low volume server.
   ARG1: The web server instance name to view stats for. Use _Total for the total stats for all web sites.
      The web server instance name can be seen in the Microsoft IIS Manager.
      eg "Default Web Site"

EOT

query=SELECT * FROM Win32_PerfRawData_W3SVC_WebService where Name = "{_arg1}"

# run 2 WMI queries, 5 seconds apart
samples=2
delay=5

customfield=_LogonAttemptsPersec,PERF_COUNTER_COUNTER,LogonAttemptsPersec,%.0f
customfield=_AnonymousUsersPersec,PERF_COUNTER_COUNTER,AnonymousUsersPersec,%.0f
customfield=_NonAnonymousUsersPersec,PERF_COUNTER_COUNTER,NonAnonymousUsersPersec,%.0f

test=_LogonAttemptsPersec
test=CurrentAnonymousUsers
test=CurrentNonAnonymousUsers
test=_AnonymousUsersPersec
test=_NonAnonymousUsersPersec
test=TotalLogonAttempts
test=TotalAnonymousUsers
test=TotalNonAnonymousUsers

display=_DisplayMsg||~|~| - ||
display=Name||Site Name="|~|||"
display=_LogonAttemptsPersec|#/sec
display=CurrentAnonymousUsers|#
display=CurrentNonAnonymousUsers|#
display=_AnonymousUsersPersec|#/sec
display=_NonAnonymousUsersPersec|#/sec
display=TotalLogonAttempts|#
display=TotalAnonymousUsers|#
display=TotalNonAnonymousUsers|#

perf=_LogonAttemptsPersec
perf=CurrentAnonymousUsers
perf=CurrentNonAnonymousUsers
perf=_AnonymousUsersPersec
perf=_NonAnonymousUsersPersec
perf=TotalLogonAttempts
perf=TotalAnonymousUsers
perf=TotalNonAnonymousUsers



#----------------------------------------------------------
[checkiis requests]
requires=1.42
inihelp=<<EOT
MODE=checkiis
=============
   Check request stats for a Microsoft IIS Web Server.
   Tested for IIS version 6. Only tested on a low volume server.
   ARG1: The web server instance name to view stats for. Use _Total for the total stats for all web sites.
      The web server instance name can be seen in the Microsoft IIS Manager.
      eg "Default Web Site"

EOT

query=SELECT * FROM Win32_PerfRawData_W3SVC_WebService where Name = "{_arg1}"

# run 2 WMI queries, 5 seconds apart
samples=2
delay=5

customfield=_GetRequestsPersec,PERF_COUNTER_COUNTER,GetRequestsPersec,%.0f
customfield=_HeadRequestsPersec,PERF_COUNTER_COUNTER,HeadRequestsPersec,%.0f
customfield=_PostRequestsPersec,PERF_COUNTER_COUNTER,PostRequestsPersec,%.0f
customfield=_PropfindRequestsPersec,PERF_COUNTER_COUNTER,PropfindRequestsPersec,%.0f
customfield=_PutRequestsPersec,PERF_COUNTER_COUNTER,PutRequestsPersec,%.0f
customfield=_ISAPIExtensionRequestsPersec,PERF_COUNTER_COUNTER,ISAPIExtensionRequestsPersec,%.0f

# there are other request stats available - we just like the look of these ones
test=_GetRequestsPersec
test=_HeadRequestsPersec
test=_PostRequestsPersec
test=_PropfindRequestsPersec
test=_PutRequestsPersec
test=_ISAPIExtensionRequestsPersec
test=TotalGetRequests
test=TotalHeadRequests
test=TotalPostRequests
test=TotalPropfindRequests
test=TotalPutRequests
test=TotalISAPIExtensionRequests

display=_DisplayMsg||~|~| - ||
display=Name||Site Name="|~|||"
display=_GetRequestsPersec|#/sec
display=_HeadRequestsPersec|#/sec
display=_PostRequestsPersec|#/sec
display=_PropfindRequestsPersec|#/sec
display=_PutRequestsPersec|#/sec
display=_ISAPIExtensionRequestsPersec|#/sec
display=TotalGetRequests|#
display=TotalHeadRequests|#
display=TotalPostRequests|#
display=TotalPropfindRequests|#
display=TotalPutRequests|#
display=TotalISAPIExtensionRequests|#

perf=_GetRequestsPersec
perf=_HeadRequestsPersec
perf=_PostRequestsPersec
perf=_PropfindRequestsPersec
perf=_PutRequestsPersec
perf=_ISAPIExtensionRequestsPersec
perf=TotalGetRequests
perf=TotalHeadRequests
perf=TotalPostRequests
perf=TotalPropfindRequests
perf=TotalPutRequests
perf=TotalISAPIExtensionRequests

# Other requests available are
#TraceRequestsPersec
#UnlockRequestsPersec
#CGIRequestsPersec
#CopyRequestsPersec
#CurrentCGIRequests
#DeleteRequestsPersec
#LockRequestsPersec
#MkcolRequestsPersec
#MoveRequestsPersec
#OptionsRequestsPersec
#OtherRequestMethodsPersec
#ProppatchRequestsPersec
#SearchRequestsPersec
#MaximumCGIRequests
#CurrentISAPIExtensionRequests
#CurrentBlockedAsyncIORequests
#Currentblockedbandwidthbytes
#CurrentCALcountforauthenticatedusers
#CurrentCALcountforSSLconnections

#TotalDeleteRequests
#TotalCopyRequests
#TotalCGIRequests
#TotalAllowedAsyncIORequests
#TotalBlockedAsyncIORequests
#TotalLockRequests
#TotalMethodRequests
#TotalMethodRequestsPersec
#TotalMkcolRequests
#TotalMoveRequests
#TotalOptionsRequests
#TotalOtherRequestMethods
#TotalProppatchRequests
#TotalRejectedAsyncIORequests
#TotalSearchRequests
#TotalTraceRequests
#TotalUnlockRequests

#----------------------------------------------------------
[checkiis transfers]
requires=1.42
inihelp=<<EOT
MODE=checkiis
=============
   Check transfer stats (bytes and files) for a Microsoft IIS Web Server.
   Tested for IIS version 6. Only tested on a low volume server.
   ARG1: The web server instance name to view stats for. Use _Total for the total stats for all web sites.
      The web server instance name can be seen in the Microsoft IIS Manager.
      eg "Default Web Site"

EOT

query=SELECT * FROM Win32_PerfRawData_W3SVC_WebService where Name = "{_arg1}"

# run 2 WMI queries, 5 seconds apart
samples=2
delay=5

customfield=_BytesTotalPersec,PERF_COUNTER_BULK_COUNT,BytesTotalPersec,%.0f
customfield=_BytesReceivedPersec,PERF_COUNTER_BULK_COUNT,BytesReceivedPersec,%.0f
customfield=_BytesSentPersec,PERF_COUNTER_BULK_COUNT,BytesSentPersec,%.0f
customfield=_FilesPersec,PERF_COUNTER_COUNTER,FilesPersec,%.0f
customfield=_FilesReceivedPersec,PERF_COUNTER_COUNTER,FilesReceivedPersec,%.0f
customfield=_FilesSentPersec,PERF_COUNTER_COUNTER,FilesSentPersec,%.0f

test=_BytesTotalPersec
test=_BytesReceivedPersec
test=_BytesSentPersec
test=_FilesPersec
test=_FilesReceivedPersec
test=_FilesSentPersec
test=TotalBytesTransferred
test=TotalBytesReceived
test=TotalBytesSent
test=TotalFilesTransferred
test=TotalFilesReceived
test=TotalFilesSent

display=_DisplayMsg||~|~| - ||
display=Name||Site Name="|~|||"
display=_BytesTotalPersec|#B/s
display=_BytesReceivedPersec|#B/s
display=_BytesSentPersec|#B/s
display=_FilesPersec|#/s
display=_FilesReceivedPersec|#/s
display=_FilesSentPersec|#/s
display=TotalBytesTransferred|#
display=TotalBytesReceived|#
display=TotalBytesSent|#
display=TotalFilesTransferred|#
display=TotalFilesReceived|#
display=TotalFilesSent|#

perf=_BytesTotalPersec
perf=_BytesReceivedPersec
perf=_BytesSentPersec
perf=_FilesPersec
perf=_FilesReceivedPersec
perf=_FilesSentPersec
perf=TotalBytesTransferred
perf=TotalBytesReceived
perf=TotalBytesSent
perf=TotalFilesTransferred
perf=TotalFilesReceived
perf=TotalFilesSent

#----------------------------------------------------------
[checkiis connections]
requires=1.41
inihelp=<<EOT
MODE=checkiis
=============
   Check connection stats for a Microsoft IIS Web Server.
   Tested for IIS version 6. Only tested on a low volume server.
   ARG1: The web server instance name to view stats for. Use _Total for the total stats for all web sites.
      The web server instance name can be seen in the Microsoft IIS Manager.
      eg "Default Web Site"

EOT

query=SELECT * FROM Win32_PerfRawData_W3SVC_WebService where Name = "{_arg1}"

# run 2 WMI queries, 5 seconds apart
samples=2
delay=5

customfield=_ConnectionAttemptsPersec,PERF_COUNTER_COUNTER,ConnectionAttemptsPersec,%.0f

test=CurrentConnections
test=_ConnectionAttemptsPersec

display=_DisplayMsg||~|~| - ||
display=Name||Site Name="|~|||"
display=CurrentConnections|#
display=_ConnectionAttemptsPersec|#/sec

perf=CurrentConnections
perf=_ConnectionAttemptsPersec

#----------------------------------------------------------
[checkiis errors]
requires=1.41
inihelp=<<EOT
MODE=checkiis
=============
   Check error stats for a Microsoft IIS Web Server.
   Tested for IIS version 6. Only tested on a low volume server.
   ARG1: The web server instance name to view stats for. Use _Total for the total stats for all web sites.
      The web server instance name can be seen in the Microsoft IIS Manager.
      eg "Default Web Site"

EOT

query=SELECT * FROM Win32_PerfRawData_W3SVC_WebService where Name = "{_arg1}"

# run 2 WMI queries, 5 seconds apart
samples=2
delay=5

customfield=_NotFoundErrorsPersec,PERF_COUNTER_COUNTER,NotFoundErrorsPersec,%.0f
customfield=_LockedErrorsPersec,PERF_COUNTER_COUNTER,LockedErrorsPersec,%.0f

test=_NotFoundErrorsPersec
test=_LockedErrorsPersec
test=TotalNotFoundErrors
test=TotalLockedErrors

display=_DisplayMsg||~|~| - ||
display=Name||Site Name="|~|||"
display=_NotFoundErrorsPersec|#/sec
display=_LockedErrorsPersec|#/sec
display=TotalNotFoundErrors|#
display=TotalLockedErrors|#

perf=_NotFoundErrorsPersec
perf=_LockedErrorsPersec
perf=TotalNotFoundErrors
perf=TotalLockedErrors

# Other IIS Fields
#Frequency_Object
#Frequency_PerfTime
#Frequency_Sys100NS
#
#MaximumAnonymousUsers
#MaximumCALcountforauthenticatedusers
#MaximumCALcountforSSLconnections
#MaximumConnections
#MaximumISAPIExtensionRequests
#MaximumNonAnonymousUsers
#MeasuredAsyncIOBandwidthUsage
#
#ServiceUptime
#Timestamp_Object
#Timestamp_PerfTime
#Timestamp_Sys100NS
#
#Totalblockedbandwidthbytes
#TotalConnectionAttemptsallinstances
#TotalcountoffailedCALrequestsforauthenticatedusers
#TotalcountoffailedCALrequestsforSSLconnections
#----------------------------------------------------------
#----------------------------------------------------------
#----------------------------------------------------------
#----------------------------------------------------------

